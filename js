–ó–∞–¥–∞–Ω–∏–µ 1
–ó–∞–¥–∞–Ω–∏–µ: –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
–ù–∞ –≤—Ö–æ–¥–µ: –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, –ª—é–±–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
–ù–∞ –≤—ã—Ö–æ–¥–µ: —Å—Ç—Ä–æ–∫–∞, —Å —Ç–∏–ø–æ–º –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞

–û—Ç–≤–µ—Ç:
----------------------------------------------


function getArgumentType(argument) {
  return typeof argument;
}

console.log(getArgumentType(42));
console.log(getArgumentType("Hello"));
console.log(getArgumentType(true));
console.log(getArgumentType(null));
console.log(getArgumentType(undefined));



------------------------------------------------



–ó–∞–¥–∞–Ω–∏–µ 2
–ó–∞–¥–∞–Ω–∏–µ: –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ—á–µ–º—É?
const a = () => console.log("a");
const b = () => console.log("b");
const c = a || b ? a() : b();
console.log(c);


–û—Ç–≤–µ—Ç:
a
undefined

–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ const c = a || b ? a() : b();, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è a || b. –û–±–∞ a –∏ b —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –ø–æ—ç—Ç–æ–º—É —É—Å–ª–æ–≤–∏–µ –±—É–¥–µ—Ç –∏—Å—Ç–∏–Ω–Ω—ã–º. –ó–∞—Ç–µ–º, —Ç–∞–∫ –∫–∞–∫ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è a() –∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ "a".

–ù–æ, —Ñ—É–Ω–∫—Ü–∏—è a –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é c –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ undefined. –ò–º–µ–Ω–Ω–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ  –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ console.log(c).



–§—É–Ω–∫—Ü–∏–∏
–ó–∞–¥–∞–Ω–∏–µ 1
–ó–∞–¥–∞–Ω–∏–µ: –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å—É–º–º—É –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤,
–µ—Å–ª–∏ —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —á–∏—Å–ª–æ. –í—ã–∑–æ–≤–æ–≤ –í–°–ï–ì–î–ê 5
–ü—Ä–∏–º–µ—Ä—ã:
count(3)(2)(1)(5)(7) // 18
count(3)(null)(1)('asad')() // 4


–æ—Ç–≤–µ—Ç:
------------------------------------------

function count(...args) {
  let sum = 0;

  function innerCount(...innerArgs) {
    if (innerArgs.length === 0) {
      return sum;
    }

    for (let i = 0; i < innerArgs.length; i++) {
      if (typeof innerArgs[i] === 'number') {
        sum += innerArgs[i];
      }
    }

    return innerCount;
  }

  return innerCount(...args);
}


console.log(count(3)(2)(1)(5)(7)());
console.log(count(3)(null)(1)('asad')());


------------------------------------------

–û–±—ä–µ–∫—Ç—ã –∏ –ú–∞—Å—Å–∏–≤—ã
–ó–∞–¥–∞–Ω–∏–µ 1
–ó–∞–¥–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é convertArrToObj, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
–º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –Ω–∞ –≤—ã—Ö–æ–¥ –æ—Ç–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤
–º–∞—Å—Å–∏–≤–µ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç
const arr = [1, null, 'test', undefined]
const obj = convertArrToObj()
console.log(obj) // { 0: 1, 1: null, 2: 'test', 3: undefined }

–æ—Ç–≤–µ—Ç:
------------------------------------------

function convertArrToObj(arr) {
  const obj = {};

  for (let i = 0; i < arr.length; i++) {
    obj[i] = arr[i];
  }

  return obj;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const arr = [1, null, 'test', undefined];
const obj = convertArrToObj(arr);
console.log(obj);

------------------------------------------

–ó–∞–¥–∞–Ω–∏–µ 2
–ó–∞–¥–∞–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é countFromArr, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç
–ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞. –ù–∞ –≤—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –º–∞—Å—Å–∏–≤, –Ω–∞ –≤—ã—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ–º
–æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –µ–≥–æ –∫–æ–ª-–≤–æ –≤ –º–∞—Å—Å–∏–≤–µ
const arr = [1, 1, 1, 'test', 'test']
const res = countFromArr(arr)
console.log(res) // { 1: 3, test: 2 }

–æ—Ç–≤–µ—Ç:
------------------------------------------

function countFromArr(arr) {
  const countObj = {};

  for (let i = 0; i < arr.length; i++) {
    const element = arr[i];

    if (countObj[element]) {
      countObj[element] += 1;
    } else {
      countObj[element] = 1;
    }
  }

  return countObj;
}

const arr = [1, 1, 1, 'test', 'test'];
const res = countFromArr(arr);
console.log(res); 

------------------------------------------

–ó–∞–¥–∞–Ω–∏–µ 3
–ó–∞–¥–∞–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é groupByField, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç
—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
–ù–∞ –≤—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è, –Ω–∞ –≤—ã—Ö–æ–¥
–æ–±—ä–µ–∫—Ç - –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º - –º–∞—Å—Å–∏–≤
–æ–±—ä–µ–∫—Ç–æ–≤ –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ —Ä–∞–≤–Ω–æ —ç—Ç–æ–º—É –∫–ª—é—á—É ü§™ (–Ω–∞–¥–µ—é—Å—å –≤ –ø—Ä–∏–º–µ—Ä–µ –±—É–¥–µ—Ç
–ø–æ–Ω—è—Ç–Ω–µ–π)
–ü—Ä–∏–º–µ—Ä:
const arr = [{test: 1},{test: 2},{test: 3},{test: 1},{test: 1}]
const res = groupByField(arr, 'test')
console.log(res) // { 1: [{test: 1}, {test: 1}, {test: 1}], 2: [{test: 2}], 3: [{test: 3}]}

–æ—Ç–≤–µ—Ç:
------------------------------------------

function groupByField(arr, field) {
  const groupedObj = {};

  for (let i = 0; i < arr.length; i++) {
    const obj = arr[i];
    const value = obj[field];

    if (groupedObj[value]) {
      groupedObj[value].push(obj);
    } else {
      groupedObj[value] = [obj];
    }
  }

  return groupedObj;
}

const arr = [{test: 1}, {test: 2}, {test: 3}, {test: 1}, {test: 1}];
const res = groupByField(arr, 'test');
console.log(res);

------------------------------------------

–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
–ó–∞–¥–∞–Ω–∏–µ 1
–ó–∞–¥–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é plus()
(1).plus(2); // 3



–æ—Ç–≤–µ—Ç:
------------------------------------------


function plus(num1) {
  const result = num1;

  function innerPlus(num2) {
    return plus(result + num2);
  }

  innerPlus.valueOf = function() {
    return result;
  };

  return innerPlus;
}

console.log(plus(1)(2)); 

------------------------------------------

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ JS"
–ó–∞–¥–∞–Ω–∏–µ 1
–ó–∞–¥–∞–Ω–∏–µ: –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å?
Untitled 3
console.log("start");
setTimeout(() => console.log("timeout"), 0);
new Promise((resolve, reject) => {
console.log("promise constructor");
reject();
})
.then(() => console.log("p1"))
.catch(() => console.log("p2"))
.catch(() => console.log("p3"))
.then(() => console.log("p4"))
.then(() => console.log("p5"));
console.log("final");


–æ—Ç–≤–µ—Ç:
------------------------------------------
start
promise constructor
final
p2
p4
p5

------------------------------------------














